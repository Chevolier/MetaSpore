feature-service:
  Source:
    - name: request
      format: json
    - name: mongodb
      kind: MongoDB  # kind in (request, mongodb, redis, jdbc, milvus)
      options:
        uri: mongodb://localhost:27017/metasoul  # uri need in mongodb
    - name: userInfo
      kind: MongoDB  # kind in (request, mongodb, redis, jdbc, milvus)
      options:
        uri: mongodb://localhost:27017/userData
    - name: mysql
      kind: JDBC
      options:
        uri: jdbc:mysql://localhost:3306/recomend?profileSQL=true  # uri need in jdbc
        driver: com.mysql.cj.jdbc.Driver  # driver need in jdbc
        user: root   # if not set, default root
        password: test  # if not set, default test
    - name: recall
      kind: Redis
      options:
        standalone:
          host: localhost # if not set, default localhost
          port: 6379      # if not set, default 6379
        lettuce-pool:
          max-active: 10
          max-wait: 10000
          max-idle: 10
          min-idle: 1
        timeout: 10000
  SourceTable:
    - name: userProfile
      source: mysql
      table: user
      columns:
        - user_id: str
        - gender: bool
        - age: float
        - name: str
        - education: str
      sqlFilters:    # only jdbc support sqlFilters
        - age > 10 and age != 25
        - name != ""
    - name: userAction
      source: userInfo
      columns:
        - user_id: str
        - recent_movie_ids: str
        - last_movie: str
        - last_genre: str
        - user_greater_than_three_rate: double
        - user_movie_avg_rating: double
      filters: # mongodb support filters
        - user_movie_avg_rating:
            gt: 0.001
        - last_genre:
            ne: "sport"
    - name: userReq
      source: request
      columns:
        - user_id: str
        - language: str
        - client_ip: str
        - login_time: timestamp
    - name: itemInfo
      source: mongodb
      columns:
        - movie_id: str
        - title: str
        - genre: str
        - imdb_url: str
        - genre_greater_than_three_rate: double
        - genre_movie_avg_rating: double
        - genre_watch_volume: double
        - movie_avg_rating: double
        - movie_greater_than_three_rate: double
        - watch_volume: double
    - name: itemcfData
      source: mongodb
      columns:
        - id: str
        - item_ids: list_str
        - item_scores: list_double
    - name: swingData
      source: mongodb
      columns:
        - id: str
        - item_ids: list_str
        - item_scores: list_double
    - name: milvusItem
      source: mongodb
      columns:
        - id: str
        - item_id: str
        - title: str
        - cfValues: str
    - name: usercf
      source: recall
      opType: hash  # opType is only use for redis, opType in (list, value, hash, set, zset), only hash has more 2 columns
      prefix: usercf
      columns:
        - user_key: str    # default col is key, other is value
        - item_ids: map_str_double
  Feature:
    - name: feature_item_match_user
      from: [ userAction, userReq]
      select: [ userAction.user_id, userAction.recent_movie_ids ]
      condition:
        - userAction.user_id: userReq.user_id
    - name: feature_twotower_user
      from: [ userAction, userProfile, userReq]
      select: [ userProfile.user_id, userAction.last_genre, gender, age, name, userReq.language ]
      condition:
        - userAction.user_id: userProfile.user_id
          type: right
        - userProfile.user_id: userReq.user_id
    - name: feature_item_match_icf
      from: [ algotransform_item_match_userprofile, itemcfData]
      select: [ algotransform_item_match_userprofile.user_id, algotransform_item_match_userprofile.item_score, itemcfData.item_ids, itemcfData.item_scores  ]
      condition:
        - algotransform_item_match_userprofile.item_id: itemcfData.id
          type: left
    - name: feature_item_match_swing
      from: [ algotransform_item_match_userprofile, swingData]
      select: [ algotransform_item_match_userprofile.user_id, algotransform_item_match_userprofile.item_score, swingData.item_ids, swingData.item_scores  ]
      condition:
        - algotransform_item_match_userprofile.item_id: swingData.id
          type: left
    - name: feature_twotower_match
      from: [ algotransform_twotower_milvus, milvusItem]
      select: [ algotransform_twotower_milvus.user_id, milvusItem.item_id, algotransform_twotower_milvus.item_score ]
      condition:
        - algotransform_twotower_milvus.milvus_id: milvusItem.id
    - name: feature_lightGBM
      from: [ userAction, itemInfo, LightGBMRanker ]
      select: [ user_greater_than_three_rate, user_movie_avg_rating, watch_volume, movie_avg_rating, movie_greater_than_three_rate, genre_watch_volume, genre_movie_avg_rating, genre_greater_than_three_rate ]
      condition:
        - userAction.user_id: LightGBMRanker.user_id
        - itemInfo.movie_id: LightGBMRanker.item_id
    - name: feature_wide_and_deep
      from: [ userAction, itemInfo, WideAndDeepRanker ]
      select: [ user_greater_than_three_rate, user_movie_avg_rating, watch_volume, movie_avg_rating, movie_greater_than_three_rate, genre_watch_volume, genre_movie_avg_rating, genre_greater_than_three_rate ]
      condition:
        - userAction.user_id: WideAndDeepRanker.user_id
        - itemInfo.movie_id: WideAndDeepRanker.item_id
  AlgoTransform:
    - name: algotransform_item_match_userprofile
      taskName: UserProfile
      feature: feature_item_match_user
      fieldActions:
        - name: item_ids
          type: list_str
          fields: recent_movie_ids
          func: splitRecentIds
          options:
            splitor: ","
        - names: [item_id, item_score]
          types: [str, double]
          input: item_ids
          func: recentWeight
        - name: user_id
          type: str
          fields: user_id
      output:
        - user_id
        - item_id
        - item_score
    - name: algotransform_item_match_icf
      taskName: ItemMatcher
      feature: feature_item_match_icf
      options:
        algo-name: "itemCF"
      fieldActions:
        - names: [unique_user_id, itemScore]
          types: [str, map_str_double]
          fields: [user_id, item_ids, item_scores, item_score]
          func: toItemScore
        - names: [user_id, item_id, score, origin_scores]
          types: [str, str, double, map_str_double]
          input: [unique_user_id, itemScore]
          func: recallCollectItem
      output:
        - user_id
        - item_id
        - score
        - origin_scores
    - name: algotransform_item_match_swing
      taskName: ItemMatcher
      feature: feature_item_match_swing
      options:
        algo-name: "swing"
      fieldActions:
        - names: [unique_user_id, itemScore]
          types: [str, map_str_double]
          fields: [user_id, item_ids, item_scores, item_score]
          func: toItemScore
        - names: [user_id, item_id, score, origin_scores]
          types: [str, str, double, map_str_double]
          input: [unique_user_id, itemScore]
          func: recallCollectItem
      output:
        - user_id
        - item_id
        - score
        - origin_scores
    - name: algotransform_twotower_user_embedding
      taskName: AlgoInference
      feature: feature_twotower_user
      fieldActions:
        - name: user_embedding
          type: list_float
          fields: [ user_id, last_genre, gender, age, name, language ]
          func: genEmbedding
          options:
            targetKey: "output"
        - name: user_id
          type: str
          fields: user_id
      output:
        - user_id
        - user_embedding
    - name: algotransform_twotower_milvus
      taskName: MilvusSearch
      algoTransform: algotransform_twotower_user_embedding
      fieldActions:
        - name: user_id
          type: str
          fields: user_id
        - name: milvus_id
          type: str
          input: milvus_ids
          func: flatList
        - name: item_score
          type: double
          input: scores
          func: flatList
        - names: [ milvus_ids, scores]
          types: [ list_str, list_double]
          fields: user_embedding
          func: milvusIdScore
      output:
        - user_id
        - milvus_id
        - item_score
    - name: algotransform_twotower_match
      taskName: ItemMatcher
      feature: feature_twotower_match
      options:
        algo-name: "twotower"
      fieldActions:
        - names: [unique_user_id, itemScore]
          types: [str, map_str_double]
          fields: [user_id, item_id, item_score]
          func: toItemScore2
        - names: [user_id, item_id, score, origin_scores]
          types: [str, str, double, map_str_double]
          input: [unique_user_id, itemScore]
          func: recallCollectItem
      output:
        - user_id
        - item_id
        - score
        - origin_scores
recommend-service:
  Services:
    - name: SwingMatcher
      tasks: algotransform_item_match_swing
      options:
        algoLevel: 3
        maxReservation: 200
    - name: ItemCfMatcher
      tasks: algotransform_item_match_icf
      options:
        algoLevel: 3
        maxReservation: 200
    - name: TwoTowersMatcher
      tasks: algotransform_twotower_match
      options:
        milvusCollectionName: two_towers_simplex
        twoTowersSimpleXModelName: two_towers_simplex
        twoTowersSimpleXAlgoLevel: 3
        twoTowersSimpleXMaxReservation: 200
    - name: WideAndDeepRanker
      tasks: feature_wide_and_deep
      options:
        modelName: movie_lens_wdl
        ranker: WideAndDeepRanker
        maxReservation: 100
        sortStrategyType: USE_RANK_MULTIPLY_MATCH
        sortStrategyAlpha: 0.4
        sortStrategyBeta: 0.6
      preTransforms:
        - name: summary
      columns:
        - user_id: str
        - item_id: str
        - item_score: double
    - name: LightGBMRanker
      tasks: feature_lightGBM
      options:
        modelName: lightgbm_test_model
      preTransforms:
        - name: summary
      columns:
        - user_id: str
        - item_id: str
        - item_score: double
    - name: diversifyBaseService
      options:
        useDiversify: true
        window: 4
        tolerance: 4
    - name: diversifyMMRService
      options:
        useDiversify: true
        lambda: 0.7
        window: 5
        tolerance: 5
  Experiments:
    - name: match.base
      options:
        maxReservation: 5
      chains:
        - then: ItemCfMatcher
          transforms:
            - name: cutOff
    - name: match.multiple
      options:
        maxReservation: 10
      chains:
        - when: [ItemCfMatcher, SwingMatcher]
          transforms:
            - name: summaryBySchema
              option: {dupFields: [ user_id, item_id ], mergeOperator: {score: maxScore, origin_scores: mergeScoreInfo}}
            - name: orderAndLimit
              option: {orderFields: [score]}
    - name: rank.base
      chains:
        - then: WideAndDeepRanker
    - name: rank.wideDeep
      chains:
        - then: WideAndDeepRanker
    - name: rank.lightGBM
      chains:
        - then: LightGBMRanker
    - name: diversify.base
      chains:
        - then: diversifyBaseService
    - name: diversify.MMR
      chains:
        - then: diversifyMMRService
  Layers:
    - name: match
      experiments:
        - name: match.base
          ratio: 0.5
        - name: match.multiple
          ratio: 0.5
    - name: rank
      experiments:
        - name: rank.base
          ratio: 0.0
        - name: rank.wideDeep
          ratio: 0.5
        - name: rank.lightGBM
          ratio: 0.5
    - name: diversify
      experiments:
        - name: diversify.base
          ratio: 0.5
        - name: diversify.MMR
          ratio: 0.5
  Scenes:
    - name: guess-you-like
      chains:   # 串行执行chain
        - then: [match]
      columns:
        - user_id: str
        - item_id: str
