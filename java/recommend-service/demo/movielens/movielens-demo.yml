feature-service:
  Source:
    - name: request
      format: json
    - name: movielens
      kind: MongoDB
      options:
        uri: mongodb://root:example@localhost:27017/movielens?authSource=admin
  SourceTable:
    - name: item
      source: movielens
      columns:
        - movie_id: long
        - genre: str
        - title: str
        - imdb_url: str
        - queryid: str
    - name: user
      source: movielens
      columns:
        - user_id: long
        - gender: str
        - age: int
        - occupation: str
        - zip: str
        - recent_movie_ids: str
        - last_movie: str
        - last_genre: str
        - user_greater_than_three_rate: decimal
        - user_movie_avg_rating: double
        - queryid: str
    - name: requestData
      source: request
      columns:
        - user_id: long
    - name: item_feature
      source: movielens
      columns:
        - movielens: long
        - watch_volume: double
        - genre: str
        - movie_avg_rating: double
        - movie_greater_than_three_rate: decimal
        - genre_watch_volume: double
        - genre_movie_avg_rating: double
        - genre_greater_than_three_rate: decimal
        - queryid: str
    - name: itemcf
      source: movielens
      columns:
        - key: str
        - queryid: str
        - value:
            list_struct:
              _1: str
              _2: double
    - name: swing
      source: movielens
      columns:
        - key: str
        - queryid: str
        - value:
            list_struct:
              _1: str
              _2: double
  Feature:
    - name: feature_user
      from: [ user, requestData]
      select: [ user.user_id, last_movie, recent_movie_ids ]
      condition:
        - requestData.user_id: user.user_id
    - name: feature_item_match_icf
      from: [ algotransform_item_match_userprofile, itemcf ]
      select: [ algotransform_item_match_userprofile.user_id, algotransform_item_match_userprofile.item_score, itemcf.value ]
      condition:
        - algotransform_item_match_userprofile.item_id: itemcf.key
          type: left
    - name: feature_item_match_swing
      from: [ algotransform_item_match_userprofile, swing ]
      select: [ algotransform_item_match_userprofile.user_id, algotransform_item_match_userprofile.item_score, swing.value ]
      condition:
        - algotransform_item_match_userprofile.item_id: swing.key
          type: left
    - name: feature_wide_and_deep
      from: [ user, item, rank_widedeep ]
      select: [ user.user_id,  item.movie_id, rank_widedeep.item_id, rank_widedeep.origin_scores ]
      condition:
        - user.user_id: rank_widedeep.user_id
        - item.movie_id: rank_widedeep.item_id
  AlgoTransform:
    - name: algotransform_item_match_userprofile
      taskName: UserProfile
      feature: feature_user
      fieldActions:
        - name: item_ids
          type: list_str
          fields: recent_movie_ids
          func: splitRecentIds
          options:
            splitor: "\u0001"
        - names: [item_id, item_score]
          types: [str, double]
          input: item_ids
          func: recentWeight
        - name: user_id
          type: str
          func: typeTransform
          fields: user_id
      output:
        - user_id
        - item_id
        - item_score
    - name: algotransform_item_match_icf
      taskName: ItemMatcher
      feature: feature_item_match_icf
      options:
        algo-name: "itemCF"
      fieldActions:
        - names: [ toItemScore.user_id, itemScore ]
          types: [ str, map_str_double ]
          fields: [ user_id, value, item_score ]
          func: toItemScore
        - names: [ user_id, item_id, score, origin_scores ]
          types: [ str, str, double, map_str_double ]
          input: [ toItemScore.user_id, itemScore ]
          func: recallCollectItem
      output:
        - user_id
        - item_id
        - score
        - origin_scores
    - name: algotransform_item_match_swing
      taskName: ItemMatcher
      feature: feature_item_match_swing
      options:
        algo-name: "swing"
      fieldActions:
        - names: [ toItemScore.user_id, itemScore ]
          types: [ str, map_str_double ]
          fields: [ user_id, value, item_score ]
          func: toItemScore
        - names: [ user_id, item_id, score, origin_scores ]
          types: [ str, str, double, map_str_double ]
          input: [ toItemScore.user_id, itemScore ]
          func: recallCollectItem
      output:
        - user_id
        - item_id
        - score
        - origin_scores
    - name: algotransform_twotower_user_embedding
      taskName: AlgoInference
      options:
        host: localhost
        port: 50000
      feature: feature_user
      fieldActions:
        - name: user_embedding
          type: list_float
          func: genEmbedding
          input: user_id
          algoColumns:
            - sparse: [user_id, last_movie, recent_movie_ids]
          options:
            modelName: two_towers_dssm
            targetKey: output
        - name: user_id
          type: str
          func: typeTransform
          fields: user_id
      output:
        - user_id
        - user_embedding
    - name: algotransform_twotower_milvus
      taskName: MilvusSearch
      options:
        host: localhost
        port: 19530
      algoTransform: algotransform_twotower_user_embedding
      fieldActions:
        - name: user_id
          type: str
          fields: user_id
        - names: [ item_id, item_score]
          types: [ str, double]
          fields: user_embedding
          func: milvusField
          options:
            collectionName: ml_1m_dssm_testing_bak
            vectorField: item_embedding
            scoreField: item_score
            useOrder: true
            useFlat: true
      output:
        - user_id
        - item_id
        - item_score
    - name: algotransform_twotower_match
      taskName: ItemMatcher
      algoTransform: algotransform_twotower_milvus
      options:
        algo-name: "twotower"
      fieldActions:
        - names: [toItemScore2.user_id, itemScore]
          types: [str, map_str_double]
          fields: [user_id, item_id, item_score]
          func: toItemScore2
        - names: [user_id, item_id, score, origin_scores]
          types: [str, str, double, map_str_double]
          input: [toItemScore2.user_id, itemScore]
          func: recallCollectItem
      output:
        - user_id
        - item_id
        - score
        - origin_scores
    - name: algotransform_widedeep
      taskName: AlgoInference
      options:
        host: localhost
        port: 50000
        algo-name: "widedeep"
      feature: feature_wide_and_deep
      fieldActions:
        - name: rankScore
          type: float
          func: predictScore
          input: [movie_id]
          algoColumns:
            - dnn_sparse: [ movie_id ]
            - lr_sparse: [ movie_id ]
          options:
            modelName: movie_lens_wdl_test
            targetKey: output
            targetIndex: 0
        - names: [ item_id, score, origin_scores]
          types: [str, float, map_str_double]
          input: [ typeTransform.item_id, rankScore ]
          func: rankCollectItem
          fields: [origin_scores]
        - names: [user_id, typeTransform.item_id, movie_id]
          types: [str, str, str]
          func: typeTransform
          fields: [user_id, item_id, movie_id]
      output:
        - user_id
        - item_id
        - score
        - origin_scores
recommend-service:
  Services:
    - name: match_swing
      tasks: algotransform_item_match_swing
      options:
        algoLevel: 3
        maxReservation: 200
    - name: match_itemcf
      tasks: algotransform_item_match_icf
      options:
        algoLevel: 3
        maxReservation: 200
    - name: match_twotower
      tasks: algotransform_twotower_match
      options:
        milvusCollectionName: ml_1m_dssm_testing_bak
        twoTowersSimpleXModelName: two_towers_dssm
        twoTowersSimpleXAlgoLevel: 3
        twoTowersSimpleXMaxReservation: 200
    - name: rank_widedeep
      tasks: algotransform_widedeep
      options:
        modelName: movie_lens_wdl
        ranker: WideAndDeepRanker
        maxReservation: 100
        sortStrategyType: USE_RANK_MULTIPLY_MATCH
        sortStrategyAlpha: 0.4
        sortStrategyBeta: 0.6
      preTransforms:
        - name: summary
      columns:
        - user_id: long
        - item_id: long
        - score: double
        - origin_scores: map_str_double
  Experiments:
    - name: match.base
      options:
        maxReservation: 5
      chains:
        - then: match_itemcf
          transforms:
            - name: cutOff
            - name: updateField
              option: { input: [ score, origin_scores ], output: [ origin_scores ], updateOperator: putOriginScores }
    - name: match.multiple
      options:
        maxReservation: 10
      chains:
        - when: [match_itemcf, match_swing, match_twotower]
          transforms:
            - name: summaryBySchema
              option: {dupFields: [ user_id, item_id ], mergeOperator: {score: maxScore, origin_scores: mergeScoreInfo}}
            - name: updateField
              option: {input: [score, origin_scores], output: [origin_scores], updateOperator: putOriginScores}
            - name: orderAndLimit
              option: {orderFields: [score]}
    - name: rank.wideDeep
      chains:
        - then: rank_widedeep
  Layers:
    - name: match
      bucketizer: random
      experiments:
        - name: match.base
          ratio: 0.5
        - name: match.multiple
          ratio: 0.5
    - name: rank
      experiments:
        - name: rank.wideDeep
          ratio: 1.0
  Scenes:
    - name: guess-you-like
      chains:   # 串行执行chain
        - then: [match, rank]
      columns:
        - user_id: str
        - item_id: str
